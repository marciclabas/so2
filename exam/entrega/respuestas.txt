================================================================
1. Comprenzión Zeos
================================================================


============================= [1a] =============================

¿En qué dirección de memoria se encuentra el PCB del 3r proceso del 
vector de tareas?

- 0x17000

¿Cómo lo has hallado?

- `make gdb`
- `print &task[2]`

============================= [1b] =============================

¿Qué valor tiene el registro ESP antes de ejecutar la 1ª instrucción del 
código de usuario?

- 0x00113ff0

¿Cómo lo has hallado?

- `objump -d user` -> `main` està a 0x00114000
- `make emuldbg`
- `lb 0x00114000` + `c` (per anar al `main`)
- `r` (per imprimir els registres)


============================= [1c] =============================

Dado  el  fichero  exam.s  con  código  en ensamblador,  indica  las  líneas 
de comandos para compilar y linkar este fichero en la imagen de sistema.

1. Compilar (a `exam.o`):
  `as86 -0 -ao exam.o exam.s`
  
2. Linkar (amb la resta d'objectes a `system`):
  `ld -g -melf_i386 -T system.lds -o system system.o exam.o` (i la resta de .o's)



================================================================
2. Task Switch
================================================================

a) ¿Funcionará este código? ¿Por qué?

- 

b) En lugar de guardar EBX, ESI y EDI en la pila nos planteamos usar un campo 
en el PCB. Define una estructura para guardar estos 3 registros y añádela al 
PCB.

```
// sched.h
typedef struct registers {
  unsigned long ebx;
  unsigned long esi;
  unsigned long edi;
} registers;

struct task_struct {
  // ...
  registers regs;
};
```


c) Indica el código necesario para implementar las funciones save_regs y 
restore_regs en lenguaje C.

- Funcions en assembly per llegir/escriure els registres
  ````
  // asm_utils.S
  ENTRY(read_ebx)
    movl %ebx, %eax
    ret

  ENTRY(write_ebx)
    movl 4(%esp), %ebx
    ret

  // un parell per cada registre
  ```

- Declarar-les a algun .h i utilitzar-les:

  ```
  // sched.c
  void save_regs(task_struct * t) {
    t->regs.ebx = read_ebx();
    t->regs.edi = read_edi();
    t->regs.esi = read_esi();
  }

  void restore_regs(task_struct * t) {
    write_ebx(t->regs.ebx);
    write_edi(t->regs.edi);
    write_esi(t->regs.esi);
  }
  ```


d) Indica cómo debe cambiar el contexto del proceso idle en su inicialización. 

-


================================================================
3. Child
================================================================

a) (0,5 puntos) Modifica el wrapper de la llamada exit.

- `wrappers.S` -> `exit` passa un parametre (via edx)
- `libc.h` -> `exit` agafa un parametre

b) (0,5 puntos) Implementa el código del wrapper de la llamada waitpid.

- `wrappers.S` -> `waitpid` (amb `int` i passant 2 parametres via edx i ecx)
- `libc.h` -> `waitpid`

c) (0,5 puntos) Implementa el código del handler de esta llamada a sistema.

- `entry.S` -> `waitpid_handler` (amb `iret`)
- `interrupt.h` -> declarar
- `interrupt.c` -> `setTrapHandler(130, waitpid_handler, 3);`

d) (0,5  puntos)  Indica  qué  estructuras  de  datos  se  tienen  que  añadir.  Indica 
también las estructuras que deben ser modificadas. Añade el código 
necesario para inicializarlas.

- PCB --> field `int waiting_for` amb el pid que estem esperant
- Nou estat `ST_ZOMBIE`
- PCB --> field `int exit_status` amb l'status del exit si estem en zombie

- La resta de coses necessàries (punter al pare, llista de fills) ja les tenim

e) (0,5  puntos)  Implementa  la  rutina  void  block(void)  para  bloquear  al  proceso 
actual .

- `sys.c:block` --> treu el current de la readyqueue i fa sched_next()


f) (0,5  puntos)  Implementa  la  rutina  void  unblock(struct  task_struct*pcb)  para 
desbloquear un proceso pasado como parámetro.

- `sys.c:unblock` --> fica el pcb a la readyqueue

g) (0,5 puntos) Modifica el código de la rutina sys_exit.

- Si el pare està esperant per ell --> crida unblock i passa-li l'status
- Sinó, no facis cleanup i entra en estat zombie

h) (1 punto) Implementa el código de la rutina de servicio sys_waitpid.

- Si el fill està en zombi --> retorna immediatament i fes-li cleanup
- Sinó --> bloqueja't

i) (0,5  puntos)  ¿Es  necesario  modificar  alguna  otra  llamada  a  sistema  o  parte 
del  sistema  para  implementar  por  completo  esta  funcionalidad?  Si  es  así 
implementa los cambios necesarios.

- Sí, en algun punt hem de passar l'status al pointer. I necessitem que el pare estigui executant-se
  perquè l'adreça sigui vàlida. El que faig és guardar-me el pointer al PCB, i copiar-hi al valor
  en el task switch


Puedes  suponer  que  tienes  la  función  struct  task_struct*  find_task_by_pid(int  pid) 
que retorna el puntero al PCB del proceso con pid PID o NULL si no lo encuentra.

--> Sort, ja la tenia ;)